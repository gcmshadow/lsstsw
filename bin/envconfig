#!/bin/bash

# setup lsstsw environment
#
# source this file from your ~/.bashrc or ~/.zshrc
#
# relative to <lsstsw>/bin/

if [[ -z $ZSH_NAME ]]; then
  LSSTSW=$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; pwd) || return 1
  SUFFIX='sh'
else
  LSSTSW=$(cd "$(dirname "$0")/.."; pwd) || return 1
  SUFFIX='zsh'
fi

# shellcheck disable=SC1090
source "${LSSTSW}/etc/settings.cfg.sh"
#
# Source script with shared functions
# shellcheck disable=SC1090
source "${LSSTSW}/bin/utils.sh"


usage() {
  if [[ ! -z "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  (cat <<-EOF

		Usage: $0  [-i] [-n] [-b] [-r]  [-h]

		Specific options:
	-i          interactive, choose from a list of available environments
	-n NAME     activate the environment name
	-b bXXXX    activate the environment used for the build with id bXXXX
	-r REF      git ref in scipipe_conda_env (hash, branch, tag)
	            (do not recreate the environment if it exists)
	-R REF      git ref in scipipe_conda_env (hash, branch, tag)
	            (check if the environment is consistent and recreate if it is not or it doesn't exists)
	-h          show this message

		EOF
  )

  finish=true
   
}

parse_args() {
  local OPTIND
  local opt

  while getopts "bnirhpc" opt; do
    case "$opt" in
    b)
      shift;
      BUILD_ID=$1
      ;;
    n)
      shift;
      ENVNAME=$1
      ;;
    i)
      INTERACTIVE=true
      ;;
    r)
      shift;
      ENVREF=$1
      ;;
    R)
      shift;
      ENVREF=$1
      CHECKENV=true
      ;;
    h)
      usage
      ;;
    c)
      CLEANSTACK=true
      ;;
    *)
      usage "Unknown option: ${opt}"
      ;;
    esac
  done
  shift $((OPTIND-1))
}

##############
config_curl

INTERACTIVE=false
ENVNAME=""
BUILD_ID=""
ENVREF=""
finish=false
#new_env=false
CLEANSTACK=false
CHECKENV=false

parse_args "$@"

if [ "$finish" = true ]; then
  return
fi

# shellcheck disable=SC2154
if [[ "${miniconda_path}" ]]; then
  # shellcheck disable=SC2154
  echo "Using local miniconda at ${miniconda_path}"
  # shellcheck disable=SC1090
  . "${miniconda_path}/etc/profile.d/conda.sh"
else
  # this implies the system conda shall be used
  CONDA_PATH=$(which conda)
  conda_path=$(dirname "${CONDA_PATH}")
  echo "Using system conda at ${conda_path}"
  # shellcheck disable=SC1090
  . "${conda_path}/../etc/profile.d/conda.sh"
fi

export PATH="$LSSTSW/lfs/bin:$PATH"
export PATH="$LSSTSW/bin:$PATH"

export MANPATH="$LSSTSW/lfs/share/man:"

if $INTERACTIVE ; then
  raw_envs=()
  # get the list of available environments
  while IFS=$'\n' read -r line 
  do 
    if [[ "$line" != '' ]] ; then
      raw_envs+=("$line")
    fi
  done < <(conda env list | grep -v "^#" | grep -v "^ " | grep -v "^base")
  envs=()
  l=0
  for i in "${raw_envs[@]}"; do
    ((l++))
    envs[l]=$(echo "${i}" | cut -f 1 -d ' ')
    echo "${l} - ${envs[${l}]}"
  done
  echo "0 - EXIT (return)"
  read -r -p "Choose environment [0 to ${l}]: " eid
  if  [[ "${eid}" -eq 0 ]] ; then
    return
  fi
  if [[ -z "${envs[${eid}]}" ]] ; then
    fail "User input error: ${eid} not in range."
  else
    LSST_CONDA_ENV_NAME="${envs[${eid}]}"
  fi

elif [[ $ENVNAME != "" ]]; then
  echo "Setting $ENVNAME environment..."  
  LSST_CONDA_ENV_NAME=${ENVNAME}
  # look for environment exists
  if ! conda env list | grep "^$LSST_CONDA_ENV_NAME " > /dev/null; then
    echo "... Environment not found"
    echo " deploying new environment for reference ${LSST_SPLENV_REF}"
    discover_platform
    deploy_env
  fi

elif [[ $BUILD_ID != "" ]]; then
  echo "Looking for the environment used in build ${BUILD_ID}..."
  if [[ -f "build/builds/${BUILD_ID}.env" ]]; then
    LSST_CONDA_ENV_NAME=$(grep 'environment_name' build/builds/"${BUILD_ID}".env | cut -f 2 -d ' ')
    # look for environment exists
    if ! conda env list | grep "^$LSST_CONDA_ENV_NAME " > /dev/null; then
      echo "... Environment not found"
      echo " deploying new environment for reference ${LSST_SPLENV_REF}"
      discover_platform
      deploy_env
    fi
  else
    echo "No build found with id ${BUILD_ID}"
    return
  fi

elif [[ $ENVREF != "" ]]; then
  echo "Activating environment for reference ${ENVREF}"

  # given the imput reference, provides the correct
  # - environment Name
  # - git reference
  # - local folder where to store environemnt files
  expand_ref "${ENVREF}"

  if ! conda env list | grep "^$LSST_CONDA_ENV_NAME " > /dev/null; then
    echo "... Environment not found"
    echo " deploying new environment for reference ${LSST_SPLENV_REF}"
    discover_platform
    deploy_env
  else
    echo "Environment $LSST_CONDA_ENV_NAME already present"
  fi

else
  # in case no ref is given as parameter, attach the default SHA-1 to $SPLENV_BASE_NAME (lsst-scipipe)
  LSST_CONDA_ENV_NAME=${LSST_CONDA_ENV_NAME:-"${SPLENV_BASE_NAME}-${LSST_SPLENV_REF}"}
  echo "Setting the default environment... ${LSST_CONDA_ENV_NAME}"

  # look for environment exists
  if ! conda env list | grep "^$LSST_CONDA_ENV_NAME " > /dev/null; then
    echo "... Environment not found"
    echo " deploying new environment for reference ${LSST_SPLENV_REF}"
    #echo "  or call bin/enconfig -i to see wich environments are available."
    #return
    discover_platform
    deploy_env
  fi

fi

#echo "Activating environment ${LSST_CONDA_ENV_NAME}"
# shellcheck disable=SC1091
if ! conda activate "$LSST_CONDA_ENV_NAME" ; then
  echo "Problem activating environment"
  return
fi

# check if eups is not already installed, and install it from conda
if ! command -v eups > /dev/null; then
  echo "No eups found in the active environment ..."
  echo "  ... trying to use a stacked eups environment"
  conda deactivate
  if ! conda env list | grep "^eups " > /dev/null; then
    echo "ERROR: Environment EUPS base environment missing. Try redeploying lsstsw."
    return
  fi
  conda activate eups
  conda activate --stack "$LSST_CONDA_ENV_NAME"
fi

export LSST_CONDA_ENV_NAME

# shellcheck disable=SC1090
. "${EUPS_DIR}/bin/setups.${SUFFIX}"

# definition EUPS_PATH depending on the environment:
# including the last 7 characters of the environment name
export EUPS_PATH="${LSSTSW}/stack/${LSST_CONDA_ENV_NAME: -7}"
echo "EUPS_PATH set to ${EUPS_PATH}"

if [[ $CLEANSTACK = true ]]; then
  rm -rf "${EUPS_PATH}"
fi

if [ ! -d "$EUPS_PATH" ]; then
  mkdir -p "${EUPS_PATH}"/{site,ups_db}
  echo "::: Deploying manifest.remap"
  ln -sf "${LSSTSW}/etc/manifest.remap" "${EUPS_PATH}/site/manifest.remap"
fi

setup -r "$LSSTSW/lsst_build"

echo "notice: lsstsw tools have been set up."

# vim: tabstop=2 shiftwidth=2 expandtab
