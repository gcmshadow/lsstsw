#!/bin/bash
#
#  Deploy a standardized, standalone, lsst-build sandbox
#

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
# shellcheck disable=SC1090
source "${SCRIPT_DIR}/../etc/settings.cfg.sh"

LSST_EUPS_VERSION=${LSST_EUPS_VERSION:-2.1.5}
LSST_EUPS_GITREV=${LSST_EUPS_GITREV:-""}
LSST_EUPS_GITREPO=${LSST_EUPS_GITREPO:-https://github.com/RobertLuptonTheGood/eups.git}
# force Python 3
LSST_MINICONDA_VERSION=${LSST_MINICONDA_VERSION:-py37_4.8.2}
LSST_MINICONDA_BASE_URL=${LSST_MINICONDA_BASE_URL:-https://repo.continuum.io/miniconda}
LSST_CONDA_CHANNELS=${LSST_CONDA_CHANNELS:-"conda-forge"}
LSST_GIT_VERSION=${LSST_GIT_VERSION:-2.18.0}
LSST_LFS_VERSION=${LSST_LFS_VERSION:-2.4.2}
LSST_BUILD_GITREV=${LSST_BUILD_GITREV:-master}
LSST_BUILD_GITREPO=${LSST_BUILD_GITREPO:-https://github.com/lsst/lsst_build.git}
LSST_SCIPIPECENV_GITREPO=${LSST_SCIPIPECENV_GITREPO:-https://github.com/lsst/scipipe_conda_env.git}

set -e

print_error() {
  >&2 echo -e "$@"
}

fail() {
  local code=${2:-1}
  [[ -n $1 ]] && print_error "$1"
  # shellcheck disable=SC2086
  exit $code
}

usage() {
  if [[ ! -z "$1" ]]; then
    print_error "$0: $1"
  fi

  # note that heredocs are prefixed with tab chars
  fail "$(cat <<-EOF

		Usage: $0 [-h] <runenv-fork> <rubinenv-branch>

		Specific options:
	    -h          show this message

		EOF
  )"
}

config_curl() {
  # Prefer system curl; user-installed ones sometimes behave oddly
  if [[ -x /usr/bin/curl ]]; then
    CURL=${CURL:-/usr/bin/curl}
  else
    CURL=${CURL:-curl}
  fi

  # disable curl progress meter unless running under a tty -- this is intended to
  # reduce the amount of console output when running under CI
  CURL_OPTS=('-#')
  if [[ ! -t 1 ]]; then
    CURL_OPTS=('-sS')
  fi

  # curl will exit 0 on 404 without the fail flag
  CURL_OPTS+=('--fail')
}

parse_args() {
  local OPTIND
  local opt

  # We are intentionally not using gnu `getopt` due to portability concerns.
  # Sadly, this means no long options without a massive amount of boilerplate.
  while getopts "b" opt; do
    case "$opt" in
    f)
      shift;
      FORK=$1
      ;;
    h)
      usage
      ;;
    b)
      shift;
      BRANCH=$1
      ;;
    *)
      usage "Unknown option: ${opt}"
      ;;
    esac
  done
  shift $((OPTIND-1))

  if [ "$#" -ne 2 ]; then 
    usage "Illegal number of parameters"
  fi

  FORK=$1
  BRANCH=$2
  echo "Looking ofr rubinenv definition at"
  echo "  fork: $FORK"
  echo "  branch: $BRANCH"

}


check_conda() {
  # activating conda
  CONDA_PATH=$(which conda)
  CONDA_DIR=$(dirname "${CONDA_PATH}")
  CONDA_BASE_DIR=$(dirname "${CONDA_DIR}")
  # shellcheck disable=SC1090  
  . "${CONDA_BASE_DIR}/etc/profile.d/conda.sh"
}


run() {
  if [[ $DRYRUN == true ]]; then
    echo "$@"
  elif [[ $DEBUG == true ]]; then
    (set -x; "$@")
  else
    echo "$@"
    "$@"
    result=$?
  fi
}


###### main

  config_curl
  check_conda

  FORK=""
  BRANCH=""

  parse_args "$@"

  if [[ -z "$FORK" ]]; then
    usage "Missing required information: rubinenv forked repository"
  fi
  if [[ -z "$BRANCH" ]]; then
    usage "Missing required information: BRANCH in rubinenv forked repository"
  fi

  repo_name=${FORK##*/}

  echo $repo_name
  if [ -d "$repo_name" ]; then
    rm -rf $repo_name
  fi
  git clone $FORK
  cd $repo_name
  echo " ** $BRANCH"
  git checkout $BRANCH
  git status
  git log -n 1
  git_hash=$(git rev-parse --short HEAD)

  # thir requires to have conda installed in your base environment, including build and anaconda
  # looking for a general conda installed in the user '~/'
  #    we should assume that the general conda includes anaconda and conda-build
  
  log_file="conda_build_recipe.log"
  echo "Conda Build Recipe. Redirecting to logfile: $log_file"
  conda build recipe/ 2>&1 > $log_file
  echo "Recipe Built. Logfile: $log_file"

  pkg_file=$(cat $log_file | grep "^anaconda upload" | awk '{ print $3 }')
  # /Users/GComoretto/anaconda3/conda-bld/osx-64/rubinenv-0.1.0-0.tar.bz2
  pkg_base_name=$(basename -- $pkg_file)
  version=$(echo ${pkg_base_name#"rubin-env"} | awk -F '-' '{ print $2 }')
  env_ref="$version-$git_hash"
  echo "------------------------------------------------------------------------------------------------------------"
  echo "Pkg full path: $pkg_file"
  echo "Conda path: $CONDA_PATH"
  echo "Conda dir: $CONDA_DIR"
  echo "Conda base path: $CONDA_BASE_DIR"
  echo "Pkg file: $pkg_base_name"
  echo "Pkg version: $version"
  echo "Tmp env ref: $env_ref"
  echo "Base Env Name: $SPLENV_BASE_NAME"
  # need to get
  echo "conda create -n lsst-scipipe-0.1.1 -c file:////home/gcomoret/anaconda3/conda-bld/ -c conda-forge rubin-env"
  echo "conda create -n lsst-scipipe-$env_ref -c file:///$CONDA_BASE_DIR/conda-bld/ -c conda-forge rubin-env"
  # if local miniconda is installed, deploy there the bleed environment
  if [ -d "${LSSTSW}/miniconda" ]; then
    . "${LSSTSW}/miniconda/etc/profile.d/conda.sh"
  fi
  run conda create -y -n "lsst-scipipe-$env_ref" -c "file:///$CONDA_BASE_DIR/conda-bld/" -c conda-forge rubin-env

# vim: tabstop=2 shiftwidth=2 expandtab
